
		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		This article has multiple issues. Please help improve it or discuss these issues on the talk page. (Learn how and when to remove these template messages)

      This article is missing information about something. Please expand the article to include this information. Further details may exist on the talk page.  (February 2009)
This article possibly contains original research. Please improve it by verifying the claims made and adding inline citations. Statements consisting only of original research should be removed.  (November 2016) (Learn how and when to remove this template message)
    
 (Learn how and when to remove this template message)
Vector quantization (VQ) is a classical quantization technique from signal processing that allows the modeling of probability density functions by the distribution of prototype vectors. It was originally used for data compression.  It works by dividing a large set of points (vectors) into groups having approximately the same number of points closest to them. Each group is represented by its centroid point, as in k-means and some other clustering algorithms.
The density matching property of vector quantization is powerful, especially for identifying the density of large and high-dimensional data. Since data points are represented by the index of their closest centroid, commonly occurring data have low error, and rare data high error.  This is why VQ is suitable for lossy data compression. It can also be used for lossy data correction and density estimation.
Vector quantization is based on the competitive learning paradigm, so it is closely related to the self-organizing map model and to sparse coding models used in deep learning algorithms such as autoencoder.

Contents

1 Training
2 Applications

2.1 Use in data compression
2.2 Video codecs based on vector quantization
2.3 Audio codecs based on vector quantization
2.4 Use in pattern recognition
2.5 Use as clustering algorithm
2.6 Generative Adversarial Networks (GAN)


3 See also
4 References
5 External links



Training[edit]
The simplest training algorithm for vector quantization is:[1]

Pick a sample point at random
Move the nearest quantization vector centroid towards this sample point, by a small fraction of the distance
Repeat
A more sophisticated algorithm reduces the bias in the density matching estimation, and ensures that all points are used, by including an extra sensitivity parameter[citation needed]:

Increase each centroid's sensitivity 
  
    
      
        
          s
          
            i
          
        
      
    
    {\displaystyle s_{i}}
  
 by a small amount
Pick a sample point 
  
    
      
        P
      
    
    {\displaystyle P}
  
 at random
For each quantization vector centroid 
  
    
      
        
          c
          
            i
          
        
      
    
    {\displaystyle c_{i}}
  
, let 
  
    
      
        d
        (
        P
        ,
        
          c
          
            i
          
        
        )
      
    
    {\displaystyle d(P,c_{i})}
  
 denote the distance of 
  
    
      
        P
      
    
    {\displaystyle P}
  
 and 
  
    
      
        
          c
          
            i
          
        
      
    
    {\displaystyle c_{i}}
  

Find the centroid 
  
    
      
        
          c
          
            i
          
        
      
    
    {\displaystyle c_{i}}
  
 for which 
  
    
      
        d
        (
        P
        ,
        
          c
          
            i
          
        
        )
        âˆ’
        
          s
          
            i
          
        
      
    
    {\displaystyle d(P,c_{i})-s_{i}}
  
 is the smallest
Move 
  
    
      
        
          c
          
            i
          
        
      
    
    {\displaystyle c_{i}}
  
 towards 
  
    
      
        P
      
    
    {\displaystyle P}
  
 by a small fraction of the distance
Set 
  
    
      
        
          s
          
            i
          
        
      
    
    {\displaystyle s_{i}}
  
 to zero
Repeat
It is desirable to use a cooling schedule to produce convergence: see Simulated annealing.  Another (simpler) method is LBG which is based on K-Means.
The algorithm can be iteratively updated with 'live' data, rather than by picking random points from a data set, but this will introduce some bias if the data are temporally correlated over many samples.

Applications[edit]
Vector quantization is used for lossy data compression, lossy data correction, pattern recognition, density estimation and clustering.
Lossy data correction, or prediction, is used to recover data missing from some dimensions. It is done by finding the nearest group with the data dimensions available, then predicting the result based on the values for the missing dimensions, assuming that they will have the same value as the group's centroid.
For density estimation, the area/volume that is closer to a particular centroid than to any other is inversely proportional to the density (due to the density matching property of the algorithm).

Use in data compression[edit]
Vector quantization, also called "block quantization" or "pattern matching quantization" is often used in lossy data compression.  It works by encoding values from a multidimensional vector space into a finite set of values from a discrete subspace of lower dimension. A lower-space vector requires less storage space, so the data is compressed.  Due to the density matching property of vector quantization, the compressed data has errors that are inversely proportional to density.
The transformation is usually done by projection or by using a codebook. In some cases, a codebook can be also used to entropy code the discrete value in the same step, by generating a prefix coded variable-length encoded value as its output.
The set of discrete amplitude levels is quantized jointly rather than each sample being quantized separately.  Consider a k-dimensional vector 
  
    
      
        [
        
          x
          
            1
          
        
        ,
        
          x
          
            2
          
        
        ,
        .
        .
        .
        ,
        
          x
          
            k
          
        
        ]
      
    
    {\displaystyle [x_{1},x_{2},...,x_{k}]}
  
 of amplitude levels.  It is compressed by choosing the nearest matching vector from a set of n-dimensional vectors 
  
    
      
        [
        
          y
          
            1
          
        
        ,
        
          y
          
            2
          
        
        ,
        .
        .
        .
        ,
        
          y
          
            n
          
        
        ]
      
    
    {\displaystyle [y_{1},y_{2},...,y_{n}]}
  
, with n < k.
All possible combinations of the n-dimensional vector 
  
    
      
        [
        
          y
          
            1
          
        
        ,
        
          y
          
            2
          
        
        ,
        .
        .
        .
        ,
        
          y
          
            n
          
        
        ]
      
    
    {\displaystyle [y_{1},y_{2},...,y_{n}]}
  
 form the vector space to which all the quantized vectors belong.
Only the index of the codeword in the codebook is sent instead of the quantized values. This conserves space and achieves more compression.
Twin vector quantization (VQF) is part of the MPEG-4 standard dealing with time domain weighted interleaved vector quantization.

Video codecs based on vector quantization[edit]
This list is incomplete; you can help by adding missing items.  (August 2008)
Bink video[2]
Cinepak
Daala is transform-based but uses pyramid vector quantization on transformed coefficients[3]
Digital Video Interactive: Production-Level Video and Real-Time Video
Indeo
Microsoft Video 1
QuickTime: Apple Video (RPZA) and Graphics Codec (SMC)
Sorenson SVQ1 and SVQ3
Smacker video
VQA format, used in many games
The usage of video codecs based on vector quantization has declined significantly in favor of those based on motion compensated prediction combined with transform coding, e.g. those defined in MPEG standards, as the low decoding complexity of vector quantization has become less relevant.

Audio codecs based on vector quantization[edit]
This list is incomplete; you can help by adding missing items.  (August 2008)
AMR-WB+
CELP
Codec 2
DTS
G.729
iLBC
Ogg Vorbis[4]
Opus  is transform-based but uses pyramid vector quantization on transformed coefficients
TwinVQ
Use in pattern recognition[edit]
VQ was also used in the eighties for speech[5]  and speaker recognition.[6]
Recently it has also been used for efficient nearest neighbor search 
[7]
and on-line signature recognition.[8] 
In pattern recognition applications, one codebook is constructed for each class (each class being a user in biometric applications) using acoustic vectors of this user. In the testing phase the quantization distortion of a testing signal is worked out with the whole set of codebooks obtained in the training phase. The codebook that provides the smallest vector quantization distortion indicates the identified user.
The main advantage of VQ in pattern recognition is its low computational burden when compared with other techniques such as dynamic time warping (DTW) and hidden Markov model (HMM). The main drawback when compared to DTW and HMM is that it does not take into account the temporal evolution of the signals (speech, signature, etc.) because all the vectors are mixed up. In order to overcome this problem a multi-section codebook approach has been proposed.[9] The multi-section approach consists of modelling the signal with several sections (for instance, one codebook for the initial part, another one for the center and a last codebook for the ending part).

Use as clustering algorithm[edit]
As VQ is seeking for centroids as density points of nearby lying samples, it can be also directly used as a prototype-based clustering method: each centroid is then associated with one prototype. 
By aiming to minimize the expected squared quantization error[10] and introducing a decreasing learning gain fulfilling the Robbins-Monro conditions, multiple iterations over the whole data set with a concrete but fixed number of prototypes converges to the solution of k-means clustering algorithm in an incremental manner.

Generative Adversarial Networks (GAN)[edit]
VQ has been used to quantize a feature representation layer in the discriminator of GANs. The feature quantization (FQ) technique performs implicit feature matching.[11] It improves the GAN training, and yields an improved performance on a variety of popular GAN models: BigGAN for image generation, StyleGAN for face synthesis, and U-GAT-IT for unsupervised image-to-image translation.

See also[edit]
.mw-parser-output .div-col{margin-top:0.3em;column-width:30em}.mw-parser-output .div-col-small{font-size:90%}.mw-parser-output .div-col-rules{column-rule:1px solid #aaa}.mw-parser-output .div-col dl,.mw-parser-output .div-col ol,.mw-parser-output .div-col ul{margin-top:0}.mw-parser-output .div-col li,.mw-parser-output .div-col dd{page-break-inside:avoid;break-inside:avoid-column}
Speech coding
Ogg Vorbis
Voronoi diagram
Rate-distortion function
Data clustering
Learning vector quantization
Centroidal Voronoi tessellation
Growing Neural Gas, a neural network-like system for vector quantization
Image segmentation
Lloyd's algorithm
Linde,Buzo,Gray Algorithm (LBG)
K-means clustering
Autoencoder
Deep Learning

Part of this article was originally based on material from the Free On-line Dictionary of Computing and is used with permission under the GFDL.

References[edit]

^ .mw-parser-output cite.citation{font-style:inherit}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration{color:#555}.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration span{border-bottom:1px dotted;cursor:help}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output code.cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;font-size:100%}.mw-parser-output .cs1-visible-error{font-size:100%}.mw-parser-output .cs1-maint{display:none;color:#33aa33;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}Dana H. Ballard (2000). An Introduction to Natural Computation. MIT Press. p.Â 189. ISBNÂ 978-0-262-02420-4.

^ "Bink video". Book of Wisdom. 2009-12-27. Retrieved 2013-03-16.

^ Valin, JM. (October  2012). Pyramid Vector Quantization for Video Coding. IETF. I-D draft-valin-videocodec-pvq-00. Retrieved 2013-12-17.

^ 
"Vorbis I Specification". Xiph.org. 2007-03-09. Retrieved 2007-03-09.

^ Burton, D. K.; Shore, J. E.; Buck, J. T. (1983). "A generalization of isolated word recognition using vector quantization". IEEE International Conference on Acoustics Speech and Signal Processing ICASSP. 8: 1021â€“1024. doi:10.1109/ICASSP.1983.1171915.

^ Soong, F.; A. Rosenberg; L. Rabiner; B. Juang (1985). "A vector Quantization approach to Speaker Recognition". IEEE Proceedings International Conference on Acoustics, Speech and Signal Processing ICASSP. 1: 387â€“390. doi:10.1109/ICASSP.1985.1168412. S2CIDÂ 8970593.

^ H. Jegou; M. Douze; C. Schmid (2011). "Product Quantization for Nearest Neighbor Search" (PDF). IEEE Transactions on Pattern Analysis and Machine Intelligence. 33 (1): 117â€“128. CiteSeerXÂ 10.1.1.470.8573. doi:10.1109/TPAMI.2010.57. PMIDÂ 21088323. S2CIDÂ 5850884.

^ Faundez-Zanuy, Marcos (2007). "offline and On-line signature recognition based on VQ-DTW". Pattern Recognition. 40 (3): 981â€“992. doi:10.1016/j.patcog.2006.06.007.

^ Faundez-Zanuy, Marcos; Juan Manuel Pascual-Gaspar (2011). "Efficient On-line signature recognition based on Multi-section VQ". Pattern Analysis and Applications. 14 (1): 37â€“45. doi:10.1007/s10044-010-0176-8. S2CIDÂ 24868914.

^ Gray, R.M. (1984). "Vector Quantization". IEEE ASSP Magazine. 1 (2): 4â€“29. doi:10.1109/massp.1984.1162229.

^ Feature Quantization Improves GAN Training https://arxiv.org/abs/2004.02088


External links[edit]
http://www.data-compression.com/vq.html
QccPack â€” Quantization, Compression, and Coding Library (open source)
VQ Indexes Compression and Information Hiding Using Hybrid Lossless Index Coding, Wen-Jan Chen and Wen-Tsung Huang





Retrieved from "https://en.wikipedia.org/w/index.php?title=Vector_quantization&oldid=1039136402"
		Categories: Lossy compression algorithmsUnsupervised learningHidden categories: Articles to be expanded from February 2009Articles that may contain original research from November 2016All articles that may contain original researchArticles with multiple maintenance issuesAll articles with unsourced statementsArticles with unsourced statements from November 2016Articles using small message boxesIncomplete lists from August 2008
	